{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","framesPosition","isAtMaxPosition","isAtMinPosition","prev","props","itemWidth","step","infinite","images","frameSize","maxFramesPosition","length","moveTo","move","next","this","setState","animationDuration","containerStyle","width","listStyle","transitionDuration","transform","itemStyle","height","isNextDisabled","isPrevDisabled","className","style","map","imgUrl","src","alt","name","onClick","disabled","type","React","Component","App","handleInputChange","e","target","key","id","value","checked","valueAsNumber","action","htmlFor","min","max","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b6d47ab.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number,\n  infinite: boolean,\n}\n\ninterface State {\n  framesPosition: number,\n  isAtMaxPosition: boolean,\n  isAtMinPosition: boolean,\n}\n\nclass Carousel extends React.Component<Props, State> {\n  state: State = {\n    framesPosition: 0,\n    isAtMaxPosition: false,\n    isAtMinPosition: true,\n  };\n\n  prev = () => {\n    const {\n      itemWidth,\n      step,\n      infinite,\n      images,\n      frameSize,\n    } = this.props;\n\n    const {\n      framesPosition,\n      isAtMinPosition,\n    } = this.state;\n\n    const maxFramesPosition = -((images.length * itemWidth) - (itemWidth * frameSize));\n\n    const moveTo = framesPosition + (itemWidth * step);\n\n    if (isAtMinPosition && infinite) {\n      this.move(maxFramesPosition);\n    } else {\n      this.move(moveTo);\n    }\n  };\n\n  next = () => {\n    const {\n      itemWidth,\n      step,\n      infinite,\n    } = this.props;\n\n    const {\n      framesPosition,\n      isAtMaxPosition,\n    } = this.state;\n\n    const moveTo = framesPosition - (itemWidth * step);\n\n    if (isAtMaxPosition && infinite) {\n      this.move(0);\n    } else {\n      this.move(moveTo);\n    }\n  };\n\n  move(moveTo: number) {\n    const {\n      itemWidth,\n      images,\n      frameSize,\n    } = this.props;\n\n    const maxFramesPosition = -((images.length * itemWidth) - (itemWidth * frameSize));\n    const minFramesPosition = 0;\n\n    if (moveTo <= maxFramesPosition) {\n      this.setState({\n        framesPosition: maxFramesPosition,\n        isAtMaxPosition: true,\n        isAtMinPosition: false,\n      });\n    } else if (moveTo >= minFramesPosition) {\n      this.setState({\n        framesPosition: minFramesPosition,\n        isAtMinPosition: true,\n        isAtMaxPosition: false,\n      });\n    } else {\n      this.setState({\n        framesPosition: moveTo,\n        isAtMaxPosition: false,\n        isAtMinPosition: false,\n      });\n    }\n  }\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const {\n      framesPosition,\n      isAtMaxPosition,\n      isAtMinPosition,\n    } = this.state;\n\n    const containerStyle = {\n      width: itemWidth * frameSize,\n    };\n\n    const listStyle = {\n      width: itemWidth * images.length,\n      transitionDuration: `${animationDuration}ms`,\n      transform: `translateX(${framesPosition}px)`,\n\n    };\n\n    const itemStyle = {\n      width: itemWidth * frameSize,\n      height: itemWidth,\n    };\n\n    const isNextDisabled = !infinite && isAtMaxPosition;\n    const isPrevDisabled = !infinite && isAtMinPosition;\n\n    return (\n      <div className=\"Carousel\">\n        <div className=\"Carousel__container\" style={containerStyle}>\n          <ul className=\"Carousel__list block\" style={listStyle}>\n            {images.map(imgUrl => (\n              <li\n                key={imgUrl}\n                className=\"Carousel__item\"\n                style={itemStyle}\n              >\n                <img src={imgUrl} alt=\"carousel item\" className=\"Carousel__img\" />\n              </li>\n            ))}\n            {step}\n            {infinite}\n          </ul>\n        </div>\n        <button\n          name=\"prev\"\n          onClick={this.prev}\n          disabled={isPrevDisabled}\n          type=\"button\"\n        >\n          Prev\n        </button>\n        <button\n          name=\"next\"\n          onClick={this.next}\n          disabled={isNextDisabled}\n          type=\"button\"\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport Carousel from './components/Carousel';\nimport './App.scss';\nimport 'bulma/css/bulma.min.css';\n\ntype State = {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 100,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: true,\n  };\n\n  handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = e;\n\n    const key = target.id;\n    const value = target.type === 'checkbox'\n      ? target.checked\n      : target.valueAsNumber;\n\n    this.setState((state) => ({\n      ...state,\n      [key]: value,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App container\">\n        <h1>{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          {...this.state}\n        />\n\n        <form action=\"#\" className=\"field is-grouped\">\n          <div className=\"control\">\n            <label htmlFor=\"itemWidth\" className=\"label\">\n              {'Item Width: '}\n              <output htmlFor=\"itemWidth\">{itemWidth}</output>\n              <input\n                className=\"input is-small is-rounded\"\n                id=\"itemWidth\"\n                type=\"range\"\n                min=\"50\"\n                max=\"260\"\n                step=\"1\"\n                value={itemWidth}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n\n          <div className=\"control\">\n            <label htmlFor=\"frameSize\" className=\"label\">\n              {'Frame Size: '}\n              <output htmlFor=\"frameSize\">{frameSize}</output>\n              <input\n                className=\"input is-small is-rounded\"\n                id=\"frameSize\"\n                type=\"range\"\n                min=\"1\"\n                max=\"4\"\n                step=\"1\"\n                value={frameSize}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n\n          <div className=\"control\">\n            <label htmlFor=\"animationDuration\" className=\"label\">\n              {'Animation Duration: '}\n              <output htmlFor=\"animationDuration\">{animationDuration}</output>\n              <input\n                className=\"input is-small is-rounded\"\n                id=\"animationDuration\"\n                type=\"range\"\n                min=\"1000\"\n                max=\"9000\"\n                step=\"500\"\n                value={animationDuration}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n\n          <div className=\"control\">\n            <label htmlFor=\"step\" className=\"label\">\n              {'Step: '}\n              <output htmlFor=\"step\" id=\"sliderMediumTooltip\">{step}</output>\n              <input\n                className=\"input is-small is-rounded\"\n                id=\"step\"\n                type=\"range\"\n                min=\"1\"\n                max=\"4\"\n                step=\"1\"\n                value={step}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n\n          <div className=\"control\">\n            <label htmlFor=\"infinite\" className=\"label\">\n              {'infinite: '}\n              <input\n                type=\"checkbox\"\n                className=\"is-small is-rounded is-block mx-auto\"\n                id=\"infinite\"\n                checked={infinite}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}